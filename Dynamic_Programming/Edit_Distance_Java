// ___________Memoisation Approach____________

class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int[][] memo = new int[m + 1][n + 1];
        for (int i = 0; i <= m; i++) 
        {
            for (int j = 0; j <= n; j++) 
            {
                memo[i][j] = -1;
            }
        }
        return editd(word1, word2, m, n, memo);
    }

    public int editd(String word1, String word2, int m, int n, int[][] memo) {
        
        if (m == 0) 
        {
            return memo[m][n] = n;
        }
        if (n == 0) 
        {
            return memo[m][n] = m;
        }

        if (memo[m][n] != -1) 
        {
            return memo[m][n];
        }

        // character matched, then reduce size of both strings
        if (word1.charAt(m - 1) == word2.charAt(n - 1)) 
        {
            return memo[m][n] = editd(word1, word2, m - 1, n - 1, memo);
        } 
        else 
        {
            // minimum of insert delete and replace operations
            int i = editd(word1, word2, m, n - 1, memo);
            int d = editd(word1, word2, m - 1, n, memo);
            int r = editd(word1, word2, m - 1, n - 1, memo);

            return memo[m][n] = 1 + Math.min(Math.min(i, d), r);
        }
    }
}
