#include<stdio.h>
#include<stdlib.h>
#define N 5

int queue[N];
int front=-1;
int rear=-1;

void insert(int x) {
   if(rear==N-1) 
   {
       printf("Overflow OR Queue is Full");
   }
   else if(front==-1 && rear==-1)
   {
       front=rear=0;
       queue[rear]=x;
   } 
   else
   {
           rear++;
           queue[rear]=x;
   }
   
}

// This below is adding a additional zero at last, if elements inserted lesser than size are asked to display. Because, it is inserting first and then incrementing rear. So, think of it as after 2 3 4, rear will point to 3rd index, where any element is not inserted, but asked to display. So, many compiler show 0 at last...
// void insert(int x) {
//     if(front==-1 && rear==-1)
//     {
//         front=0;
//         rear=0;
//         queue[rear]=x;
//         rear=rear+1;
//     }
//     else if(rear==N-1)
//     {
//         printf("OverFlow");
//     }
//     else
//     {
//         queue[rear]=x;
//         rear=rear+1;
//     }
// }

void delete() {
    if(front==-1 && rear==-1)
    {
        printf("Queue is empty OR Underflow");
    }
    else if(front == rear)
    {
        front = rear = -1;
     
    }
    else 
    {
        printf("deleted data is %d",queue[front]);
        front++;
    }
}

void display() {
    if(front ==-1 && rear==-1)
    {
        printf("Queue is Empty");
    }
    else
    for(int i=front ; i<rear+1; i++)
    {
        printf(" %d\t",queue[i]);
    }
}

void peek() {
    if(front==-1 && rear==-1)
    {
        printf("Queue is Empty");
    }
    else 
    {
        printf("peek data is :%d",queue[front]);
    }
}

void main() {
    int choice,n;
    do
    {
        printf("\n1.Insert\n2.Delete\n3.peek\n4.display\n5.Exit\n");
        scanf("%d",&choice);
        
        switch(choice)
        {
            case 1:
                   printf("Enter the number to be Insert:");
                   scanf("%d",&n);
                   
                   insert(n);
                   break;
            
            case 2:
                   delete();
                   break;
                   
            case 3:
                   peek();
                   break;
                   
            case 4:
                  display();
                  break;
                  
            default:
                  printf("You Exit the program");
        }
    }
        while(choice !=5);
        
}
