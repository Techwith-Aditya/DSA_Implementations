import java.util.*;
public class queuebystack {
    Stack<Integer> s1=new Stack<>();
    Stack<Integer> s2=new Stack<>();
    int size=0;

    // space complexity is 2 * Dynamic space of stack (2 stack h tbhi 2 multiply kra)
    // time complexity will be O(2N) because of two while loops:
    public void add(int x) {
        while(s1.size()!=0) // loop for putting everything from s1 into s2. Then we will get first entered element in s1 will be on to the top of s2...
        {
            s2.push(s1.peek());
            s1.pop();
        }

        size++;
        s1.push(x);
        System.out.println("Added element is: "+x);

        while(s2.size()!=0) // again putting everything back in s1...
        {
            s1.push(s2.peek());
            s2.pop();
        }
    }

    public void remove() {
        if(s1.isEmpty())
        {
            System.out.println("No element present");
            return;
        }
        int deleted=s1.pop();
        System.out.println("Deleted element is: "+deleted);
        size--;
    }

    public int peek() {
        if(s1.isEmpty())
        {
            System.out.println("No element present");
            return -1;
        }
        return s1.peek();
    }

    public static void main(String[] args) {
        queuebystack q=new queuebystack();
        q.add(5);
        System.out.println("Size till here is: "+q.size);
        System.out.println("\n");
        q.add(15);
        System.out.println("Size till here is: "+q.size);
        System.out.println("\n");
        q.add(25);
        System.out.println("Size till here is: "+q.size);
        System.out.println("\n");

        q.remove();
        System.out.println("Size till here is: "+q.size);
        System.out.println("\n");
        System.out.println("Top element for now is: "+q.peek());
    }
}
