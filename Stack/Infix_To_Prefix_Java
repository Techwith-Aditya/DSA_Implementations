import java.util.Stack;
public class infixToPrefix {
    static int priority(char ch) {
        switch(ch) 
        {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
            default:
                return -1;
        }
    }

    public static String reverse(String expr) {
        StringBuilder reversed = new StringBuilder();
        for(int i=expr.length()-1; i>=0; i--) 
        {
            char ch = expr.charAt(i);
            if(ch == '(') 
            {
                reversed.append(')');
            } 
            else if(ch == ')') 
            {
                reversed.append('(');
            } 
            else
            {
                reversed.append(ch);
            }
        }
        return reversed.toString();
    }

    public static String convertToPostfix(String infix) {
        Stack<Character> s = new Stack<>();
        StringBuilder postfix = new StringBuilder();

        for(int i=0; i<infix.length(); i++) 
        {
            char ch=infix.charAt(i);

            if((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) 
            {
                postfix.append(ch);
            } 
            else if(ch == '(') 
            {
                s.push(ch);
            } 
            else if(ch == ')') 
            {
                while(!s.isEmpty() && s.peek()!='(') 
                {
                    postfix.append(s.pop());
                }
                s.pop();
            } 
            else 
            {
                while(!s.isEmpty() && priority(s.peek())>priority(ch)) // Main thing to note during conversion of infix to prefix is that even if you are applying the logic of infix to postfix conversion here, you should also push same precedence operators onto the stack, which wasn't the case in solely infix to postfix conversion.  
                {
                    postfix.append(s.pop());
                }
                s.push(ch);
            }
        }

        while(!s.isEmpty()) 
        {
            postfix.append(s.pop());
        }

        return postfix.toString();
    }

    public static String convertToPrefix(String infix) {
        String reversedInfix = reverse(infix);

        String postfix = convertToPostfix(reversedInfix);

        return new StringBuilder(postfix).reverse().toString();
    }

    public static void main(String[] args) {
        String infix = "(A+B)*C-D+F";
        System.out.println("Prefix: " + convertToPrefix(infix));
    }
}
